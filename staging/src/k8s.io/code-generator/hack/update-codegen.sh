#!/usr/bin/env bash

# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

# Required env vars.
# PROJECT_PACKAGE = The package of the project we are generating the code.
# CLIENT_GENERATOR_OUT = the place that our autogenerated client will be placed.
# APIS_ROOT = The root of the API that will take as base to autogenerate the code.
# GROUPS_VERSION = The group versions of the types we are generating the code.

# Optional env vars.
# GO_HEADER_FILE = Custom header file for Go autogenerated files.
# OUTPUT_BASE = A base output customization if the base output is not in the project.
# EXTERNAL_APIS_ROOT = Gen generating internal code this needs to point to external APIs root.

# Check required options.
if [[ -z PROJECT_PACKAGE ]]; then
  echo "PROJECT_PACKAGE env var is required"
  exit 1
fi

if [[ -z CLIENT_GENERATOR_OUT ]]; then
  echo "CLIENT_GENERATOR_OUT env var is required"
  exit 1
fi

if [[ -z APIS_ROOT ]]; then
  echo "APIS_ROOT env var is required"
  exit 1
fi

if [[ -z GROUPS_VERSION ]]; then
  echo "GROUPS_VERSION env var is required"
  exit 1
fi

# Set the header option if its needed.
if [[ -v GO_HEADER_FILE ]]; then
    if [[ ! -f ${GO_HEADER_FILE} ]]; then
        echo "${GO_HEADER_FILE} file doesn't exists"
        exit 1
    fi
    GO_HEADER_FILE="--go-header-file ${GO_HEADER_FILE}"
else
    GO_HEADER_FILE=""
fi

# Custom output base, used for example when executing this from a vendor inside
# Kubernetes repository. In regular use cases this will not be used.
if [[ -v OUTPUT_BASE ]]; then
    OUTPUT_BASE="--output-base ${OUTPUT_BASE}"
else
    OUTPUT_BASE=""
fi

# If we need an external API package means that we need different script
# and is not a common code generation (internal code generation).
# In regular use cases this will not be used.
if [[ -v EXTERNAL_APIS_ROOT ]]; then
    CMD=generate-internal-groups.sh
else
    EXTERNAL_APIS_ROOT=""
    CMD=generate-groups.sh
fi


# By default set the target to all.
GENERATION_TARGETS=${GENERATION_TARGETS:-all}

# Get all the required paths (We need to use relative paths from our current position).
CODEGEN_HACK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CODEGEN_ROOT="$( dirname "${CODEGEN_HACK_DIR}" )"
RELATIVE_CODEGEN_PKG=$(realpath --relative-to="${PWD}" ${CODEGEN_ROOT})

# Generate.
${RELATIVE_CODEGEN_PKG}/${CMD} \
  ${GENERATION_TARGETS} \
  ${CLIENT_GENERATOR_OUT} \
  ${APIS_ROOT} \
  ${EXTERNAL_APIS_ROOT} \
  "${GROUPS_VERSION}" \
  ${GO_HEADER_FILE} \
  ${OUTPUT_BASE}